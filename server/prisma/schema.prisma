// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  id           Int     @id @default(autoincrement())
  name         String
  email        String  @unique
  password     String
  gender       String
  dept         String
  pursuing     String
  batch        Int
  phone        String
  avatar       String?
  verified     Boolean @default(false)
  events       Event[] // created events
  joinedEvents Event[] @relation("StudentJoinedEvents")

  forums      Forum[]
  comments    Comment[]
  Connection  Connection[]
  Application Application[]
}

model Alumni {
  id                  Int          @id @default(autoincrement())
  name                String
  email               String       @unique
  password            String
  gender              String
  graduatedIn         Int
  dept                String
  jobRole             String
  company             String
  phone               String
  avatar              String?
  verified            Boolean      @default(false)
  jobs                Job[]
  events              Event[] // events created by alumni
  joinedEvents        Event[]      @relation("AlumniJoinedEvents")
  forums              Forum[]
  comments            Comment[]
  // Alumni receiving connection
  receivedConnections Connection[] @relation("ReceivedConnections")

  // Alumni initiating connection
  sentConnections Connection[]  @relation("SentConnections")
  Application     Application[]
}

model Admin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
}

model Job {
  id          Int           @id @default(autoincrement())
  jobRole     String
  company     String
  location    String
  description String        @db.Text
  type        String
  salary      Int
  postedAt    DateTime      @default(now())
  alumniId    Int
  postedBy    Alumni        @relation(fields: [alumniId], references: [id])
  Application Application[]
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  date        DateTime @db.Date
  time        DateTime @db.Time
  description String   @db.Text
  location    String

  // creator of the events
  alumniId  Int?
  alumni    Alumni?  @relation(fields: [alumniId], references: [id])
  studentId Int?
  student   Student? @relation(fields: [studentId], references: [id])

  // Joined users (many-to-many)
  joinedStudents Student[] @relation("StudentJoinedEvents")
  joinedAlumni   Alumni[]  @relation("AlumniJoinedEvents")
}

model Forum {
  id          Int       @id @default(autoincrement())
  title       String
  description String    @db.Text
  image       String?
  alumniId    Int?
  studentId   Int?
  alumni      Alumni?   @relation(fields: [alumniId], references: [id])
  student     Student?  @relation(fields: [studentId], references: [id])
  comments    Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now())

  // Relations
  forum   Forum @relation(fields: [forumId], references: [id])
  forumId Int

  alumni   Alumni? @relation(fields: [alumniId], references: [id])
  alumniId Int?

  student   Student? @relation(fields: [studentId], references: [id])
  studentId Int?
}

model Connection {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  status    String   @default("pending") // NEW: "pending", "accepted", etc.

  // The target alumni (receiver)
  alumniId Int
  alumni   Alumni @relation("ReceivedConnections", fields: [alumniId], references: [id])

  // Initiator can be a student
  studentId Int?
  student   Student? @relation(fields: [studentId], references: [id])

  // Or the initiator is an alumni
  connectedById Int?
  connectedBy   Alumni? @relation("SentConnections", fields: [connectedById], references: [id])
}

model Application {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  status    String   @default("Pending") // or enum: Pending, Accepted, Rejected

  jobId Int
  job   Job @relation(fields: [jobId], references: [id])

  studentId Int?
  student   Student? @relation(fields: [studentId], references: [id])

  alumniId Int?
  alumni   Alumni? @relation(fields: [alumniId], references: [id])

  // @@check(studentId IS NOT NULL OR alumniId IS NOT NULL) // ensure at least one of them exists
}
